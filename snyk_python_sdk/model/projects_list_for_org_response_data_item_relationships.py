# coding: utf-8

"""
    Snyk API

    Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.

    The version of the OpenAPI document: REST
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snyk_python_sdk import schemas  # noqa: F401


class ProjectsListForOrgResponseDataItemRelationships(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "organization",
            "target",
        }
        
        class properties:
        
            @staticmethod
            def organization() -> typing.Type['ProjectsListForOrgResponseDataItemRelationshipsOrganization']:
                return ProjectsListForOrgResponseDataItemRelationshipsOrganization
            
            
            class target(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class one_of_0(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "data",
                                "links",
                            }
                            
                            class properties:
                                
                                
                                class data(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "id",
                                            "type",
                                        }
                                        
                                        class properties:
                                            id = schemas.UUIDSchema
                                            
                                            
                                            class type(
                                                schemas.StrSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    regex=[{
                                                        'pattern': r'^[a-z][a-z0-9]*(_[a-z][a-z0-9]*)*$',
                                                    }]
                                            __annotations__ = {
                                                "id": id,
                                                "type": type,
                                            }
                                    
                                    id: MetaOapg.properties.id
                                    type: MetaOapg.properties.type
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "type", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "type", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
                                        type: typing.Union[MetaOapg.properties.type, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'data':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            id=id,
                                            type=type,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                
                                
                                class links(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            
                                            
                                            class related(
                                                schemas.ComposedSchema,
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    one_of_0 = schemas.StrSchema
                                                    
                                                    
                                                    class one_of_1(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            required = {
                                                                "href",
                                                            }
                                                            
                                                            class properties:
                                                                href = schemas.StrSchema
                                                                
                                                                
                                                                class meta(
                                                                    schemas.DictSchema
                                                                ):
                                                                
                                                                
                                                                    class MetaOapg:
                                                                        additional_properties = schemas.AnyTypeSchema
                                                                    
                                                                    def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                                                                        # dict_instance[name] accessor
                                                                        return super().__getitem__(name)
                                                                    
                                                                    def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                                                                        return super().get_item_oapg(name)
                                                                
                                                                    def __new__(
                                                                        cls,
                                                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                                        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                                    ) -> 'meta':
                                                                        return super().__new__(
                                                                            cls,
                                                                            *args,
                                                                            _configuration=_configuration,
                                                                            **kwargs,
                                                                        )
                                                                __annotations__ = {
                                                                    "href": href,
                                                                    "meta": meta,
                                                                }
                                                        
                                                        href: MetaOapg.properties.href
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["href"]) -> MetaOapg.properties.href: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["meta"]) -> MetaOapg.properties.meta: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["href", "meta", ], str]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["href"]) -> MetaOapg.properties.href: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> typing.Union[MetaOapg.properties.meta, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["href", "meta", ], str]):
                                                            return super().get_item_oapg(name)
                                                        
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                                            href: typing.Union[MetaOapg.properties.href, str, ],
                                                            meta: typing.Union[MetaOapg.properties.meta, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                        ) -> 'one_of_1':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                href=href,
                                                                meta=meta,
                                                                _configuration=_configuration,
                                                                **kwargs,
                                                            )
                                                    
                                                    @classmethod
                                                    @functools.lru_cache()
                                                    def one_of(cls):
                                                        # we need this here to make our import statements work
                                                        # we must store _composed_schemas in here so the code is only run
                                                        # when we invoke this method. If we kept this at the class
                                                        # level we would get an error because the class level
                                                        # code would be run when this module is imported, and these composed
                                                        # classes don't exist yet because their module has not finished
                                                        # loading
                                                        return [
                                                            cls.one_of_0,
                                                            cls.one_of_1,
                                                        ]
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'related':
                                                    return super().__new__(
                                                        cls,
                                                        *args,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            __annotations__ = {
                                                "related": related,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["related"]) -> MetaOapg.properties.related: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["related", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["related"]) -> typing.Union[MetaOapg.properties.related, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["related", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        related: typing.Union[MetaOapg.properties.related, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'links':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            related=related,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                
                                
                                class meta(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        additional_properties = schemas.AnyTypeSchema
                                    
                                    def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                                        return super().get_item_oapg(name)
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                    ) -> 'meta':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                __annotations__ = {
                                    "data": data,
                                    "links": links,
                                    "meta": meta,
                                }
                        
                        data: MetaOapg.properties.data
                        links: MetaOapg.properties.links
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["meta"]) -> MetaOapg.properties.meta: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["data", "links", "meta", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> typing.Union[MetaOapg.properties.meta, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["data", "links", "meta", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, ],
                            links: typing.Union[MetaOapg.properties.links, dict, frozendict.frozendict, ],
                            meta: typing.Union[MetaOapg.properties.meta, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'one_of_0':
                            return super().__new__(
                                cls,
                                *args,
                                data=data,
                                links=links,
                                meta=meta,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class one_of_1(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "data",
                                "links",
                            }
                            
                            class properties:
                                
                                
                                class data(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "attributes",
                                            "id",
                                            "type",
                                        }
                                        
                                        class properties:
                                            
                                            
                                            class attributes(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    class properties:
                                                        display_name = schemas.StrSchema
                                                        
                                                        
                                                        class url(
                                                            schemas.StrBase,
                                                            schemas.NoneBase,
                                                            schemas.Schema,
                                                            schemas.NoneStrMixin
                                                        ):
                                                        
                                                        
                                                            def __new__(
                                                                cls,
                                                                *args: typing.Union[None, str, ],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'url':
                                                                return super().__new__(
                                                                    cls,
                                                                    *args,
                                                                    _configuration=_configuration,
                                                                )
                                                        __annotations__ = {
                                                            "display_name": display_name,
                                                            "url": url,
                                                        }
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["display_name", "url", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["display_name"]) -> typing.Union[MetaOapg.properties.display_name, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["display_name", "url", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                                    display_name: typing.Union[MetaOapg.properties.display_name, str, schemas.Unset] = schemas.unset,
                                                    url: typing.Union[MetaOapg.properties.url, None, str, schemas.Unset] = schemas.unset,
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'attributes':
                                                    return super().__new__(
                                                        cls,
                                                        *args,
                                                        display_name=display_name,
                                                        url=url,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            id = schemas.UUIDSchema
                                            
                                            
                                            class meta(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    class properties:
                                                        integration_data = schemas.DictSchema
                                                        __annotations__ = {
                                                            "integration_data": integration_data,
                                                        }
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["integration_data"]) -> MetaOapg.properties.integration_data: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["integration_data", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["integration_data"]) -> typing.Union[MetaOapg.properties.integration_data, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["integration_data", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                                    integration_data: typing.Union[MetaOapg.properties.integration_data, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'meta':
                                                    return super().__new__(
                                                        cls,
                                                        *args,
                                                        integration_data=integration_data,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            type = schemas.StrSchema
                                            __annotations__ = {
                                                "attributes": attributes,
                                                "id": id,
                                                "meta": meta,
                                                "type": type,
                                            }
                                    
                                    attributes: MetaOapg.properties.attributes
                                    id: MetaOapg.properties.id
                                    type: MetaOapg.properties.type
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["meta"]) -> MetaOapg.properties.meta: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["attributes", "id", "meta", "type", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> typing.Union[MetaOapg.properties.meta, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attributes", "id", "meta", "type", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        attributes: typing.Union[MetaOapg.properties.attributes, dict, frozendict.frozendict, ],
                                        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
                                        type: typing.Union[MetaOapg.properties.type, str, ],
                                        meta: typing.Union[MetaOapg.properties.meta, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'data':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            attributes=attributes,
                                            id=id,
                                            type=type,
                                            meta=meta,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                
                                
                                class links(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            
                                            
                                            class related(
                                                schemas.ComposedSchema,
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    one_of_0 = schemas.StrSchema
                                                    
                                                    
                                                    class one_of_1(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            required = {
                                                                "href",
                                                            }
                                                            
                                                            class properties:
                                                                href = schemas.StrSchema
                                                                
                                                                
                                                                class meta(
                                                                    schemas.DictSchema
                                                                ):
                                                                
                                                                
                                                                    class MetaOapg:
                                                                        additional_properties = schemas.AnyTypeSchema
                                                                    
                                                                    def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                                                                        # dict_instance[name] accessor
                                                                        return super().__getitem__(name)
                                                                    
                                                                    def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                                                                        return super().get_item_oapg(name)
                                                                
                                                                    def __new__(
                                                                        cls,
                                                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                                        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                                    ) -> 'meta':
                                                                        return super().__new__(
                                                                            cls,
                                                                            *args,
                                                                            _configuration=_configuration,
                                                                            **kwargs,
                                                                        )
                                                                __annotations__ = {
                                                                    "href": href,
                                                                    "meta": meta,
                                                                }
                                                        
                                                        href: MetaOapg.properties.href
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["href"]) -> MetaOapg.properties.href: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["meta"]) -> MetaOapg.properties.meta: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["href", "meta", ], str]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["href"]) -> MetaOapg.properties.href: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> typing.Union[MetaOapg.properties.meta, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["href", "meta", ], str]):
                                                            return super().get_item_oapg(name)
                                                        
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                                            href: typing.Union[MetaOapg.properties.href, str, ],
                                                            meta: typing.Union[MetaOapg.properties.meta, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                        ) -> 'one_of_1':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                href=href,
                                                                meta=meta,
                                                                _configuration=_configuration,
                                                                **kwargs,
                                                            )
                                                    
                                                    @classmethod
                                                    @functools.lru_cache()
                                                    def one_of(cls):
                                                        # we need this here to make our import statements work
                                                        # we must store _composed_schemas in here so the code is only run
                                                        # when we invoke this method. If we kept this at the class
                                                        # level we would get an error because the class level
                                                        # code would be run when this module is imported, and these composed
                                                        # classes don't exist yet because their module has not finished
                                                        # loading
                                                        return [
                                                            cls.one_of_0,
                                                            cls.one_of_1,
                                                        ]
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'related':
                                                    return super().__new__(
                                                        cls,
                                                        *args,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            __annotations__ = {
                                                "related": related,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["related"]) -> MetaOapg.properties.related: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["related", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["related"]) -> typing.Union[MetaOapg.properties.related, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["related", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        related: typing.Union[MetaOapg.properties.related, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'links':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            related=related,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                __annotations__ = {
                                    "data": data,
                                    "links": links,
                                }
                        
                        data: MetaOapg.properties.data
                        links: MetaOapg.properties.links
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["data", "links", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["data", "links", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, ],
                            links: typing.Union[MetaOapg.properties.links, dict, frozendict.frozendict, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'one_of_1':
                            return super().__new__(
                                cls,
                                *args,
                                data=data,
                                links=links,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'target':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def importer() -> typing.Type['ProjectsListForOrgResponseDataItemRelationshipsImporter']:
                return ProjectsListForOrgResponseDataItemRelationshipsImporter
        
            @staticmethod
            def owner() -> typing.Type['ProjectsListForOrgResponseDataItemRelationshipsOwner']:
                return ProjectsListForOrgResponseDataItemRelationshipsOwner
            __annotations__ = {
                "organization": organization,
                "target": target,
                "importer": importer,
                "owner": owner,
            }
    
    organization: 'ProjectsListForOrgResponseDataItemRelationshipsOrganization'
    target: MetaOapg.properties.target
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization"]) -> 'ProjectsListForOrgResponseDataItemRelationshipsOrganization': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target"]) -> MetaOapg.properties.target: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importer"]) -> 'ProjectsListForOrgResponseDataItemRelationshipsImporter': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> 'ProjectsListForOrgResponseDataItemRelationshipsOwner': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["organization", "target", "importer", "owner", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization"]) -> 'ProjectsListForOrgResponseDataItemRelationshipsOrganization': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target"]) -> MetaOapg.properties.target: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importer"]) -> typing.Union['ProjectsListForOrgResponseDataItemRelationshipsImporter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union['ProjectsListForOrgResponseDataItemRelationshipsOwner', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["organization", "target", "importer", "owner", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        organization: 'ProjectsListForOrgResponseDataItemRelationshipsOrganization',
        target: typing.Union[MetaOapg.properties.target, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        importer: typing.Union['ProjectsListForOrgResponseDataItemRelationshipsImporter', schemas.Unset] = schemas.unset,
        owner: typing.Union['ProjectsListForOrgResponseDataItemRelationshipsOwner', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectsListForOrgResponseDataItemRelationships':
        return super().__new__(
            cls,
            *args,
            organization=organization,
            target=target,
            importer=importer,
            owner=owner,
            _configuration=_configuration,
            **kwargs,
        )

from snyk_python_sdk.model.projects_list_for_org_response_data_item_relationships_importer import ProjectsListForOrgResponseDataItemRelationshipsImporter
from snyk_python_sdk.model.projects_list_for_org_response_data_item_relationships_organization import ProjectsListForOrgResponseDataItemRelationshipsOrganization
from snyk_python_sdk.model.projects_list_for_org_response_data_item_relationships_owner import ProjectsListForOrgResponseDataItemRelationshipsOwner
