# coding: utf-8

"""
    Snyk API

    Missing description placeholder

    The version of the OpenAPI document: REST
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snyk_python_sdk import schemas  # noqa: F401


class CommonIssueModelAttributesCoordinatesItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def remedies() -> typing.Type['CommonIssueModelAttributesCoordinatesItemRemedies']:
                return CommonIssueModelAttributesCoordinatesItemRemedies
        
            @staticmethod
            def representation() -> typing.Type['CommonIssueModelAttributesCoordinatesItemRepresentation']:
                return CommonIssueModelAttributesCoordinatesItemRepresentation
            __annotations__ = {
                "remedies": remedies,
                "representation": representation,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remedies"]) -> 'CommonIssueModelAttributesCoordinatesItemRemedies': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["representation"]) -> 'CommonIssueModelAttributesCoordinatesItemRepresentation': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["remedies", "representation", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remedies"]) -> typing.Union['CommonIssueModelAttributesCoordinatesItemRemedies', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["representation"]) -> typing.Union['CommonIssueModelAttributesCoordinatesItemRepresentation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["remedies", "representation", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        remedies: typing.Union['CommonIssueModelAttributesCoordinatesItemRemedies', schemas.Unset] = schemas.unset,
        representation: typing.Union['CommonIssueModelAttributesCoordinatesItemRepresentation', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CommonIssueModelAttributesCoordinatesItem':
        return super().__new__(
            cls,
            *args,
            remedies=remedies,
            representation=representation,
            _configuration=_configuration,
            **kwargs,
        )

from snyk_python_sdk.model.common_issue_model_attributes_coordinates_item_remedies import CommonIssueModelAttributesCoordinatesItemRemedies
from snyk_python_sdk.model.common_issue_model_attributes_coordinates_item_representation import CommonIssueModelAttributesCoordinatesItemRepresentation
