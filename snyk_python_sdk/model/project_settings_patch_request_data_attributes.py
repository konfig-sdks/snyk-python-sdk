# coding: utf-8

"""
    Snyk API

    Missing description placeholder

    The version of the OpenAPI document: REST
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snyk_python_sdk import schemas  # noqa: F401


class ProjectSettingsPatchRequestDataAttributes(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            is_active = schemas.BoolSchema
        
            @staticmethod
            def severity_threshold() -> typing.Type['SeverityThreshold']:
                return SeverityThreshold
            target_channel_id = schemas.StrSchema
            __annotations__ = {
                "is_active": is_active,
                "severity_threshold": severity_threshold,
                "target_channel_id": target_channel_id,
            }
        min_properties = 1
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["severity_threshold"]) -> 'SeverityThreshold': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_channel_id"]) -> MetaOapg.properties.target_channel_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["is_active", "severity_threshold", "target_channel_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_active"]) -> typing.Union[MetaOapg.properties.is_active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["severity_threshold"]) -> typing.Union['SeverityThreshold', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_channel_id"]) -> typing.Union[MetaOapg.properties.target_channel_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["is_active", "severity_threshold", "target_channel_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        is_active: typing.Union[MetaOapg.properties.is_active, bool, schemas.Unset] = schemas.unset,
        severity_threshold: typing.Union['SeverityThreshold', schemas.Unset] = schemas.unset,
        target_channel_id: typing.Union[MetaOapg.properties.target_channel_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectSettingsPatchRequestDataAttributes':
        return super().__new__(
            cls,
            *args,
            is_active=is_active,
            severity_threshold=severity_threshold,
            target_channel_id=target_channel_id,
            _configuration=_configuration,
            **kwargs,
        )

from snyk_python_sdk.model.severity_threshold import SeverityThreshold
