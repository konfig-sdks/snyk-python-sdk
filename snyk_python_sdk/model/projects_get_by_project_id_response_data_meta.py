# coding: utf-8

"""
    Snyk API

    Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.

    The version of the OpenAPI document: REST
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snyk_python_sdk import schemas  # noqa: F401


class ProjectsGetByProjectIdResponseDataMeta(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class cli_monitored_at(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cli_monitored_at':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def latest_dependency_total() -> typing.Type['LatestDependencyTotal']:
                return LatestDependencyTotal
        
            @staticmethod
            def latest_issue_counts() -> typing.Type['LatestIssueCounts']:
                return LatestIssueCounts
            __annotations__ = {
                "cli_monitored_at": cli_monitored_at,
                "latest_dependency_total": latest_dependency_total,
                "latest_issue_counts": latest_issue_counts,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cli_monitored_at"]) -> MetaOapg.properties.cli_monitored_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latest_dependency_total"]) -> 'LatestDependencyTotal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latest_issue_counts"]) -> 'LatestIssueCounts': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cli_monitored_at", "latest_dependency_total", "latest_issue_counts", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cli_monitored_at"]) -> typing.Union[MetaOapg.properties.cli_monitored_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latest_dependency_total"]) -> typing.Union['LatestDependencyTotal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latest_issue_counts"]) -> typing.Union['LatestIssueCounts', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cli_monitored_at", "latest_dependency_total", "latest_issue_counts", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cli_monitored_at: typing.Union[MetaOapg.properties.cli_monitored_at, None, str, datetime, schemas.Unset] = schemas.unset,
        latest_dependency_total: typing.Union['LatestDependencyTotal', schemas.Unset] = schemas.unset,
        latest_issue_counts: typing.Union['LatestIssueCounts', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectsGetByProjectIdResponseDataMeta':
        return super().__new__(
            cls,
            *args,
            cli_monitored_at=cli_monitored_at,
            latest_dependency_total=latest_dependency_total,
            latest_issue_counts=latest_issue_counts,
            _configuration=_configuration,
            **kwargs,
        )

from snyk_python_sdk.model.latest_dependency_total import LatestDependencyTotal
from snyk_python_sdk.model.latest_issue_counts import LatestIssueCounts
