# coding: utf-8

"""
    Snyk API

    Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.

    The version of the OpenAPI document: REST
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snyk_python_sdk import schemas  # noqa: F401


class CommonIssueModelAttributes(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            description = schemas.StrSchema
        
            @staticmethod
            def coordinates() -> typing.Type['CommonIssueModelAttributesCoordinates']:
                return CommonIssueModelAttributesCoordinates
            created_at = schemas.DateTimeSchema
            
            
            class effective_severity_level(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def INFO(cls):
                    return cls("info")
                
                @schemas.classproperty
                def LOW(cls):
                    return cls("low")
                
                @schemas.classproperty
                def MEDIUM(cls):
                    return cls("medium")
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("high")
                
                @schemas.classproperty
                def CRITICAL(cls):
                    return cls("critical")
            key = schemas.StrSchema
        
            @staticmethod
            def problems() -> typing.Type['CommonIssueModelAttributesProblems']:
                return CommonIssueModelAttributesProblems
            
            
            class severities(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Severity']:
                        return Severity
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Severity'], typing.List['Severity']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'severities':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Severity':
                    return super().__getitem__(i)
        
            @staticmethod
            def slots() -> typing.Type['Slots']:
                return Slots
            type = schemas.StrSchema
            updated_at = schemas.DateTimeSchema
            __annotations__ = {
                "title": title,
                "description": description,
                "coordinates": coordinates,
                "created_at": created_at,
                "effective_severity_level": effective_severity_level,
                "key": key,
                "problems": problems,
                "severities": severities,
                "slots": slots,
                "type": type,
                "updated_at": updated_at,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coordinates"]) -> 'CommonIssueModelAttributesCoordinates': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effective_severity_level"]) -> MetaOapg.properties.effective_severity_level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["problems"]) -> 'CommonIssueModelAttributesProblems': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["severities"]) -> MetaOapg.properties.severities: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slots"]) -> 'Slots': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "description", "coordinates", "created_at", "effective_severity_level", "key", "problems", "severities", "slots", "type", "updated_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coordinates"]) -> typing.Union['CommonIssueModelAttributesCoordinates', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effective_severity_level"]) -> typing.Union[MetaOapg.properties.effective_severity_level, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> typing.Union[MetaOapg.properties.key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["problems"]) -> typing.Union['CommonIssueModelAttributesProblems', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["severities"]) -> typing.Union[MetaOapg.properties.severities, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slots"]) -> typing.Union['Slots', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "description", "coordinates", "created_at", "effective_severity_level", "key", "problems", "severities", "slots", "type", "updated_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        coordinates: typing.Union['CommonIssueModelAttributesCoordinates', schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        effective_severity_level: typing.Union[MetaOapg.properties.effective_severity_level, str, schemas.Unset] = schemas.unset,
        key: typing.Union[MetaOapg.properties.key, str, schemas.Unset] = schemas.unset,
        problems: typing.Union['CommonIssueModelAttributesProblems', schemas.Unset] = schemas.unset,
        severities: typing.Union[MetaOapg.properties.severities, list, tuple, schemas.Unset] = schemas.unset,
        slots: typing.Union['Slots', schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CommonIssueModelAttributes':
        return super().__new__(
            cls,
            *args,
            title=title,
            description=description,
            coordinates=coordinates,
            created_at=created_at,
            effective_severity_level=effective_severity_level,
            key=key,
            problems=problems,
            severities=severities,
            slots=slots,
            type=type,
            updated_at=updated_at,
            _configuration=_configuration,
            **kwargs,
        )

from snyk_python_sdk.model.common_issue_model_attributes_coordinates import CommonIssueModelAttributesCoordinates
from snyk_python_sdk.model.common_issue_model_attributes_problems import CommonIssueModelAttributesProblems
from snyk_python_sdk.model.severity import Severity
from snyk_python_sdk.model.slots import Slots
