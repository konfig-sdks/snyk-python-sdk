# coding: utf-8

"""
    Snyk API

    Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.

    The version of the OpenAPI document: REST
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snyk_python_sdk import schemas  # noqa: F401


class Slots(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            disclosure_time = schemas.DateTimeSchema
            exploit = schemas.StrSchema
            publication_time = schemas.StrSchema
        
            @staticmethod
            def references() -> typing.Type['SlotsReferences']:
                return SlotsReferences
            __annotations__ = {
                "disclosure_time": disclosure_time,
                "exploit": exploit,
                "publication_time": publication_time,
                "references": references,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disclosure_time"]) -> MetaOapg.properties.disclosure_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exploit"]) -> MetaOapg.properties.exploit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publication_time"]) -> MetaOapg.properties.publication_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["references"]) -> 'SlotsReferences': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["disclosure_time", "exploit", "publication_time", "references", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disclosure_time"]) -> typing.Union[MetaOapg.properties.disclosure_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exploit"]) -> typing.Union[MetaOapg.properties.exploit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publication_time"]) -> typing.Union[MetaOapg.properties.publication_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["references"]) -> typing.Union['SlotsReferences', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["disclosure_time", "exploit", "publication_time", "references", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        disclosure_time: typing.Union[MetaOapg.properties.disclosure_time, str, datetime, schemas.Unset] = schemas.unset,
        exploit: typing.Union[MetaOapg.properties.exploit, str, schemas.Unset] = schemas.unset,
        publication_time: typing.Union[MetaOapg.properties.publication_time, str, schemas.Unset] = schemas.unset,
        references: typing.Union['SlotsReferences', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Slots':
        return super().__new__(
            cls,
            *args,
            disclosure_time=disclosure_time,
            exploit=exploit,
            publication_time=publication_time,
            references=references,
            _configuration=_configuration,
            **kwargs,
        )

from snyk_python_sdk.model.slots_references import SlotsReferences
