# coding: utf-8

"""
    Snyk API

    Missing description placeholder

    The version of the OpenAPI document: REST
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snyk_python_sdk import schemas  # noqa: F401


class Resolution(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    An optional field recording when and via what means an issue was resolved, if it was resolved.
Resolved issues are retained for XX days.

    """


    class MetaOapg:
        required = {
            "resolved_at",
            "type",
        }
        
        class properties:
            resolved_at = schemas.DateTimeSchema
        
            @staticmethod
            def type() -> typing.Type['ResolutionTypeDef']:
                return ResolutionTypeDef
            details = schemas.StrSchema
            __annotations__ = {
                "resolved_at": resolved_at,
                "type": type,
                "details": details,
            }
    
    resolved_at: MetaOapg.properties.resolved_at
    type: 'ResolutionTypeDef'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resolved_at"]) -> MetaOapg.properties.resolved_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'ResolutionTypeDef': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["details"]) -> MetaOapg.properties.details: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["resolved_at", "type", "details", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resolved_at"]) -> MetaOapg.properties.resolved_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'ResolutionTypeDef': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["details"]) -> typing.Union[MetaOapg.properties.details, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["resolved_at", "type", "details", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        resolved_at: typing.Union[MetaOapg.properties.resolved_at, str, datetime, ],
        type: 'ResolutionTypeDef',
        details: typing.Union[MetaOapg.properties.details, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Resolution':
        return super().__new__(
            cls,
            *args,
            resolved_at=resolved_at,
            type=type,
            details=details,
            _configuration=_configuration,
            **kwargs,
        )

from snyk_python_sdk.model.resolution_type_def import ResolutionTypeDef
