# coding: utf-8

"""
    Snyk API

    Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.

    The version of the OpenAPI document: REST
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snyk_python_sdk import schemas  # noqa: F401


class Coordinate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            is_fixable_manually = schemas.BoolSchema
            is_fixable_snyk = schemas.BoolSchema
            is_fixable_upstream = schemas.BoolSchema
            is_patchable = schemas.BoolSchema
            is_pinnable = schemas.BoolSchema
            is_upgradeable = schemas.BoolSchema
            reachability = schemas.StrSchema
            
            
            class remedies(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    max_items = 5
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['Remedy']:
                        return Remedy
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Remedy'], typing.List['Remedy']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'remedies':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Remedy':
                    return super().__getitem__(i)
        
            @staticmethod
            def representations() -> typing.Type['CoordinateRepresentations']:
                return CoordinateRepresentations
            __annotations__ = {
                "is_fixable_manually": is_fixable_manually,
                "is_fixable_snyk": is_fixable_snyk,
                "is_fixable_upstream": is_fixable_upstream,
                "is_patchable": is_patchable,
                "is_pinnable": is_pinnable,
                "is_upgradeable": is_upgradeable,
                "reachability": reachability,
                "remedies": remedies,
                "representations": representations,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_fixable_manually"]) -> MetaOapg.properties.is_fixable_manually: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_fixable_snyk"]) -> MetaOapg.properties.is_fixable_snyk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_fixable_upstream"]) -> MetaOapg.properties.is_fixable_upstream: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_patchable"]) -> MetaOapg.properties.is_patchable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_pinnable"]) -> MetaOapg.properties.is_pinnable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_upgradeable"]) -> MetaOapg.properties.is_upgradeable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reachability"]) -> MetaOapg.properties.reachability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remedies"]) -> MetaOapg.properties.remedies: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["representations"]) -> 'CoordinateRepresentations': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["is_fixable_manually", "is_fixable_snyk", "is_fixable_upstream", "is_patchable", "is_pinnable", "is_upgradeable", "reachability", "remedies", "representations", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_fixable_manually"]) -> typing.Union[MetaOapg.properties.is_fixable_manually, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_fixable_snyk"]) -> typing.Union[MetaOapg.properties.is_fixable_snyk, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_fixable_upstream"]) -> typing.Union[MetaOapg.properties.is_fixable_upstream, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_patchable"]) -> typing.Union[MetaOapg.properties.is_patchable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_pinnable"]) -> typing.Union[MetaOapg.properties.is_pinnable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_upgradeable"]) -> typing.Union[MetaOapg.properties.is_upgradeable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reachability"]) -> typing.Union[MetaOapg.properties.reachability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remedies"]) -> typing.Union[MetaOapg.properties.remedies, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["representations"]) -> typing.Union['CoordinateRepresentations', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["is_fixable_manually", "is_fixable_snyk", "is_fixable_upstream", "is_patchable", "is_pinnable", "is_upgradeable", "reachability", "remedies", "representations", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        is_fixable_manually: typing.Union[MetaOapg.properties.is_fixable_manually, bool, schemas.Unset] = schemas.unset,
        is_fixable_snyk: typing.Union[MetaOapg.properties.is_fixable_snyk, bool, schemas.Unset] = schemas.unset,
        is_fixable_upstream: typing.Union[MetaOapg.properties.is_fixable_upstream, bool, schemas.Unset] = schemas.unset,
        is_patchable: typing.Union[MetaOapg.properties.is_patchable, bool, schemas.Unset] = schemas.unset,
        is_pinnable: typing.Union[MetaOapg.properties.is_pinnable, bool, schemas.Unset] = schemas.unset,
        is_upgradeable: typing.Union[MetaOapg.properties.is_upgradeable, bool, schemas.Unset] = schemas.unset,
        reachability: typing.Union[MetaOapg.properties.reachability, str, schemas.Unset] = schemas.unset,
        remedies: typing.Union[MetaOapg.properties.remedies, list, tuple, schemas.Unset] = schemas.unset,
        representations: typing.Union['CoordinateRepresentations', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Coordinate':
        return super().__new__(
            cls,
            *args,
            is_fixable_manually=is_fixable_manually,
            is_fixable_snyk=is_fixable_snyk,
            is_fixable_upstream=is_fixable_upstream,
            is_patchable=is_patchable,
            is_pinnable=is_pinnable,
            is_upgradeable=is_upgradeable,
            reachability=reachability,
            remedies=remedies,
            representations=representations,
            _configuration=_configuration,
            **kwargs,
        )

from snyk_python_sdk.model.coordinate_representations import CoordinateRepresentations
from snyk_python_sdk.model.remedy import Remedy
