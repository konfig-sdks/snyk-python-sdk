# coding: utf-8

"""
    Snyk API

    Missing description placeholder

    The version of the OpenAPI document: REST
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snyk_python_sdk import schemas  # noqa: F401


class ImageTargetRefAttributes(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def platform() -> typing.Type['Platform']:
                return Platform
            target_id = schemas.UUIDSchema
            target_reference = schemas.StrSchema
            __annotations__ = {
                "platform": platform,
                "target_id": target_id,
                "target_reference": target_reference,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["platform"]) -> 'Platform': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_id"]) -> MetaOapg.properties.target_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_reference"]) -> MetaOapg.properties.target_reference: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["platform", "target_id", "target_reference", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["platform"]) -> typing.Union['Platform', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_id"]) -> typing.Union[MetaOapg.properties.target_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_reference"]) -> typing.Union[MetaOapg.properties.target_reference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["platform", "target_id", "target_reference", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        platform: typing.Union['Platform', schemas.Unset] = schemas.unset,
        target_id: typing.Union[MetaOapg.properties.target_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        target_reference: typing.Union[MetaOapg.properties.target_reference, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ImageTargetRefAttributes':
        return super().__new__(
            cls,
            *args,
            platform=platform,
            target_id=target_id,
            target_reference=target_reference,
            _configuration=_configuration,
            **kwargs,
        )

from snyk_python_sdk.model.platform import Platform
