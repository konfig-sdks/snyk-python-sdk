# coding: utf-8

"""
    Snyk API

    Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.

    The version of the OpenAPI document: REST
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snyk_python_sdk import schemas  # noqa: F401


class PatchProjectRequestDataAttributes(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def tags() -> typing.Type['PatchProjectRequestDataAttributesTags']:
                return PatchProjectRequestDataAttributesTags
        
            @staticmethod
            def business_criticality() -> typing.Type['PatchProjectRequestDataAttributesBusinessCriticality']:
                return PatchProjectRequestDataAttributesBusinessCriticality
        
            @staticmethod
            def environment() -> typing.Type['PatchProjectRequestDataAttributesEnvironment']:
                return PatchProjectRequestDataAttributesEnvironment
        
            @staticmethod
            def lifecycle() -> typing.Type['PatchProjectRequestDataAttributesLifecycle']:
                return PatchProjectRequestDataAttributesLifecycle
            
            
            class test_frequency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "daily": "DAILY",
                        "weekly": "WEEKLY",
                        "never": "NEVER",
                    }
                
                @schemas.classproperty
                def DAILY(cls):
                    return cls("daily")
                
                @schemas.classproperty
                def WEEKLY(cls):
                    return cls("weekly")
                
                @schemas.classproperty
                def NEVER(cls):
                    return cls("never")
            __annotations__ = {
                "tags": tags,
                "business_criticality": business_criticality,
                "environment": environment,
                "lifecycle": lifecycle,
                "test_frequency": test_frequency,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> 'PatchProjectRequestDataAttributesTags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["business_criticality"]) -> 'PatchProjectRequestDataAttributesBusinessCriticality': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environment"]) -> 'PatchProjectRequestDataAttributesEnvironment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lifecycle"]) -> 'PatchProjectRequestDataAttributesLifecycle': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["test_frequency"]) -> MetaOapg.properties.test_frequency: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "business_criticality", "environment", "lifecycle", "test_frequency", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union['PatchProjectRequestDataAttributesTags', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["business_criticality"]) -> typing.Union['PatchProjectRequestDataAttributesBusinessCriticality', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environment"]) -> typing.Union['PatchProjectRequestDataAttributesEnvironment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lifecycle"]) -> typing.Union['PatchProjectRequestDataAttributesLifecycle', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["test_frequency"]) -> typing.Union[MetaOapg.properties.test_frequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "business_criticality", "environment", "lifecycle", "test_frequency", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tags: typing.Union['PatchProjectRequestDataAttributesTags', schemas.Unset] = schemas.unset,
        business_criticality: typing.Union['PatchProjectRequestDataAttributesBusinessCriticality', schemas.Unset] = schemas.unset,
        environment: typing.Union['PatchProjectRequestDataAttributesEnvironment', schemas.Unset] = schemas.unset,
        lifecycle: typing.Union['PatchProjectRequestDataAttributesLifecycle', schemas.Unset] = schemas.unset,
        test_frequency: typing.Union[MetaOapg.properties.test_frequency, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PatchProjectRequestDataAttributes':
        return super().__new__(
            cls,
            *args,
            tags=tags,
            business_criticality=business_criticality,
            environment=environment,
            lifecycle=lifecycle,
            test_frequency=test_frequency,
            _configuration=_configuration,
            **kwargs,
        )

from snyk_python_sdk.model.patch_project_request_data_attributes_business_criticality import PatchProjectRequestDataAttributesBusinessCriticality
from snyk_python_sdk.model.patch_project_request_data_attributes_environment import PatchProjectRequestDataAttributesEnvironment
from snyk_python_sdk.model.patch_project_request_data_attributes_lifecycle import PatchProjectRequestDataAttributesLifecycle
from snyk_python_sdk.model.patch_project_request_data_attributes_tags import PatchProjectRequestDataAttributesTags
