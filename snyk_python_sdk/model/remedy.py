# coding: utf-8

"""
    Snyk API

    Missing description placeholder

    The version of the OpenAPI document: REST
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snyk_python_sdk import schemas  # noqa: F401


class Remedy(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "type",
        }
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "indeterminate": "INDETERMINATE",
                        "manual": "MANUAL",
                        "automated": "AUTOMATED",
                        "rule_result_message": "RULE_RESULT_MESSAGE",
                        "terraform": "TERRAFORM",
                        "cloudformation": "CLOUDFORMATION",
                        "cli": "CLI",
                        "kubernetes": "KUBERNETES",
                        "arm": "ARM",
                    }
                
                @schemas.classproperty
                def INDETERMINATE(cls):
                    return cls("indeterminate")
                
                @schemas.classproperty
                def MANUAL(cls):
                    return cls("manual")
                
                @schemas.classproperty
                def AUTOMATED(cls):
                    return cls("automated")
                
                @schemas.classproperty
                def RULE_RESULT_MESSAGE(cls):
                    return cls("rule_result_message")
                
                @schemas.classproperty
                def TERRAFORM(cls):
                    return cls("terraform")
                
                @schemas.classproperty
                def CLOUDFORMATION(cls):
                    return cls("cloudformation")
                
                @schemas.classproperty
                def CLI(cls):
                    return cls("cli")
                
                @schemas.classproperty
                def KUBERNETES(cls):
                    return cls("kubernetes")
                
                @schemas.classproperty
                def ARM(cls):
                    return cls("arm")
            
            
            class description(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 4096
                    min_length = 1
            
            
            class correlation_id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 256
                    min_length = 1
        
            @staticmethod
            def meta() -> typing.Type['RemedyMetadata']:
                return RemedyMetadata
            __annotations__ = {
                "type": type,
                "description": description,
                "correlation_id": correlation_id,
                "meta": meta,
            }
    
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["correlation_id"]) -> MetaOapg.properties.correlation_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meta"]) -> 'RemedyMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "description", "correlation_id", "meta", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["correlation_id"]) -> typing.Union[MetaOapg.properties.correlation_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> typing.Union['RemedyMetadata', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "description", "correlation_id", "meta", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        correlation_id: typing.Union[MetaOapg.properties.correlation_id, str, schemas.Unset] = schemas.unset,
        meta: typing.Union['RemedyMetadata', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Remedy':
        return super().__new__(
            cls,
            *args,
            type=type,
            description=description,
            correlation_id=correlation_id,
            meta=meta,
            _configuration=_configuration,
            **kwargs,
        )

from snyk_python_sdk.model.remedy_metadata import RemedyMetadata
