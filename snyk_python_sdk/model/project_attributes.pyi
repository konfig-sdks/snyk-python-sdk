# coding: utf-8

"""
    Snyk API

    Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.

    The version of the OpenAPI document: REST
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snyk_python_sdk import schemas  # noqa: F401


class ProjectAttributes(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "settings",
            "target_file",
            "read_only",
            "created",
            "origin",
            "target_reference",
            "name",
            "type",
            "status",
        }
        
        class properties:
            created = schemas.DateTimeSchema
            name = schemas.StrSchema
            origin = schemas.StrSchema
            read_only = schemas.BoolSchema
        
            @staticmethod
            def settings() -> typing.Type['ProjectSettings']:
                return ProjectSettings
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("active")
                
                @schemas.classproperty
                def INACTIVE(cls):
                    return cls("inactive")
            target_file = schemas.StrSchema
            target_reference = schemas.StrSchema
            type = schemas.StrSchema
        
            @staticmethod
            def tags() -> typing.Type['ProjectAttributesTags']:
                return ProjectAttributesTags
            
            
            class build_args(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            YarnBuildArgs,
                            ContainerBuildArgs,
                            NugetBuildArgs,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'build_args':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def business_criticality() -> typing.Type['ProjectAttributesBusinessCriticality']:
                return ProjectAttributesBusinessCriticality
        
            @staticmethod
            def environment() -> typing.Type['ProjectAttributesEnvironment']:
                return ProjectAttributesEnvironment
        
            @staticmethod
            def lifecycle() -> typing.Type['ProjectAttributesLifecycle']:
                return ProjectAttributesLifecycle
            target_runtime = schemas.StrSchema
            __annotations__ = {
                "created": created,
                "name": name,
                "origin": origin,
                "read_only": read_only,
                "settings": settings,
                "status": status,
                "target_file": target_file,
                "target_reference": target_reference,
                "type": type,
                "tags": tags,
                "build_args": build_args,
                "business_criticality": business_criticality,
                "environment": environment,
                "lifecycle": lifecycle,
                "target_runtime": target_runtime,
            }
    
    settings: 'ProjectSettings'
    target_file: MetaOapg.properties.target_file
    read_only: MetaOapg.properties.read_only
    created: MetaOapg.properties.created
    origin: MetaOapg.properties.origin
    target_reference: MetaOapg.properties.target_reference
    name: MetaOapg.properties.name
    type: MetaOapg.properties.type
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["origin"]) -> MetaOapg.properties.origin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["read_only"]) -> MetaOapg.properties.read_only: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settings"]) -> 'ProjectSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_file"]) -> MetaOapg.properties.target_file: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_reference"]) -> MetaOapg.properties.target_reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> 'ProjectAttributesTags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["build_args"]) -> MetaOapg.properties.build_args: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["business_criticality"]) -> 'ProjectAttributesBusinessCriticality': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environment"]) -> 'ProjectAttributesEnvironment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lifecycle"]) -> 'ProjectAttributesLifecycle': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_runtime"]) -> MetaOapg.properties.target_runtime: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["created", "name", "origin", "read_only", "settings", "status", "target_file", "target_reference", "type", "tags", "build_args", "business_criticality", "environment", "lifecycle", "target_runtime", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["origin"]) -> MetaOapg.properties.origin: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["read_only"]) -> MetaOapg.properties.read_only: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settings"]) -> 'ProjectSettings': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_file"]) -> MetaOapg.properties.target_file: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_reference"]) -> MetaOapg.properties.target_reference: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union['ProjectAttributesTags', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["build_args"]) -> typing.Union[MetaOapg.properties.build_args, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["business_criticality"]) -> typing.Union['ProjectAttributesBusinessCriticality', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environment"]) -> typing.Union['ProjectAttributesEnvironment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lifecycle"]) -> typing.Union['ProjectAttributesLifecycle', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_runtime"]) -> typing.Union[MetaOapg.properties.target_runtime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["created", "name", "origin", "read_only", "settings", "status", "target_file", "target_reference", "type", "tags", "build_args", "business_criticality", "environment", "lifecycle", "target_runtime", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        settings: 'ProjectSettings',
        target_file: typing.Union[MetaOapg.properties.target_file, str, ],
        read_only: typing.Union[MetaOapg.properties.read_only, bool, ],
        created: typing.Union[MetaOapg.properties.created, str, datetime, ],
        origin: typing.Union[MetaOapg.properties.origin, str, ],
        target_reference: typing.Union[MetaOapg.properties.target_reference, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        tags: typing.Union['ProjectAttributesTags', schemas.Unset] = schemas.unset,
        build_args: typing.Union[MetaOapg.properties.build_args, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        business_criticality: typing.Union['ProjectAttributesBusinessCriticality', schemas.Unset] = schemas.unset,
        environment: typing.Union['ProjectAttributesEnvironment', schemas.Unset] = schemas.unset,
        lifecycle: typing.Union['ProjectAttributesLifecycle', schemas.Unset] = schemas.unset,
        target_runtime: typing.Union[MetaOapg.properties.target_runtime, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectAttributes':
        return super().__new__(
            cls,
            *args,
            settings=settings,
            target_file=target_file,
            read_only=read_only,
            created=created,
            origin=origin,
            target_reference=target_reference,
            name=name,
            type=type,
            status=status,
            tags=tags,
            build_args=build_args,
            business_criticality=business_criticality,
            environment=environment,
            lifecycle=lifecycle,
            target_runtime=target_runtime,
            _configuration=_configuration,
            **kwargs,
        )

from snyk_python_sdk.model.container_build_args import ContainerBuildArgs
from snyk_python_sdk.model.nuget_build_args import NugetBuildArgs
from snyk_python_sdk.model.project_attributes_business_criticality import ProjectAttributesBusinessCriticality
from snyk_python_sdk.model.project_attributes_environment import ProjectAttributesEnvironment
from snyk_python_sdk.model.project_attributes_lifecycle import ProjectAttributesLifecycle
from snyk_python_sdk.model.project_attributes_tags import ProjectAttributesTags
from snyk_python_sdk.model.project_settings import ProjectSettings
from snyk_python_sdk.model.yarn_build_args import YarnBuildArgs
