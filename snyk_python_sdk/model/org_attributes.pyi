# coding: utf-8

"""
    Snyk API

    Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.

    The version of the OpenAPI document: REST
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snyk_python_sdk import schemas  # noqa: F401


class OrgAttributes(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "name",
            "slug",
            "is_personal",
        }
        
        class properties:
            is_personal = schemas.BoolSchema
            name = schemas.StrSchema
            slug = schemas.StrSchema
            access_requests_enabled = schemas.BoolSchema
            created_at = schemas.DateTimeSchema
            group_id = schemas.UUIDSchema
            updated_at = schemas.DateTimeSchema
            __annotations__ = {
                "is_personal": is_personal,
                "name": name,
                "slug": slug,
                "access_requests_enabled": access_requests_enabled,
                "created_at": created_at,
                "group_id": group_id,
                "updated_at": updated_at,
            }
    
    name: MetaOapg.properties.name
    slug: MetaOapg.properties.slug
    is_personal: MetaOapg.properties.is_personal
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_personal"]) -> MetaOapg.properties.is_personal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_requests_enabled"]) -> MetaOapg.properties.access_requests_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group_id"]) -> MetaOapg.properties.group_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["is_personal", "name", "slug", "access_requests_enabled", "created_at", "group_id", "updated_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_personal"]) -> MetaOapg.properties.is_personal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_requests_enabled"]) -> typing.Union[MetaOapg.properties.access_requests_enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group_id"]) -> typing.Union[MetaOapg.properties.group_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["is_personal", "name", "slug", "access_requests_enabled", "created_at", "group_id", "updated_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        slug: typing.Union[MetaOapg.properties.slug, str, ],
        is_personal: typing.Union[MetaOapg.properties.is_personal, bool, ],
        access_requests_enabled: typing.Union[MetaOapg.properties.access_requests_enabled, bool, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        group_id: typing.Union[MetaOapg.properties.group_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrgAttributes':
        return super().__new__(
            cls,
            *args,
            name=name,
            slug=slug,
            is_personal=is_personal,
            access_requests_enabled=access_requests_enabled,
            created_at=created_at,
            group_id=group_id,
            updated_at=updated_at,
            _configuration=_configuration,
            **kwargs,
        )
