# coding: utf-8

"""
    Snyk API

    Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.

    The version of the OpenAPI document: REST
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snyk_python_sdk import schemas  # noqa: F401


class PullRequestsSettings(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Settings which describe how pull requests for a project are tested.
    """


    class MetaOapg:
        
        class properties:
            fail_only_for_issues_with_fix = schemas.BoolSchema
            
            
            class policy(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ALL(cls):
                    return cls("all")
                
                @schemas.classproperty
                def ONLY_NEW(cls):
                    return cls("only_new")
            
            
            class severity_threshold(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def LOW(cls):
                    return cls("low")
                
                @schemas.classproperty
                def MEDIUM(cls):
                    return cls("medium")
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("high")
                
                @schemas.classproperty
                def CRITICAL(cls):
                    return cls("critical")
            __annotations__ = {
                "fail_only_for_issues_with_fix": fail_only_for_issues_with_fix,
                "policy": policy,
                "severity_threshold": severity_threshold,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fail_only_for_issues_with_fix"]) -> MetaOapg.properties.fail_only_for_issues_with_fix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policy"]) -> MetaOapg.properties.policy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["severity_threshold"]) -> MetaOapg.properties.severity_threshold: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["fail_only_for_issues_with_fix", "policy", "severity_threshold", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fail_only_for_issues_with_fix"]) -> typing.Union[MetaOapg.properties.fail_only_for_issues_with_fix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policy"]) -> typing.Union[MetaOapg.properties.policy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["severity_threshold"]) -> typing.Union[MetaOapg.properties.severity_threshold, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fail_only_for_issues_with_fix", "policy", "severity_threshold", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        fail_only_for_issues_with_fix: typing.Union[MetaOapg.properties.fail_only_for_issues_with_fix, bool, schemas.Unset] = schemas.unset,
        policy: typing.Union[MetaOapg.properties.policy, str, schemas.Unset] = schemas.unset,
        severity_threshold: typing.Union[MetaOapg.properties.severity_threshold, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PullRequestsSettings':
        return super().__new__(
            cls,
            *args,
            fail_only_for_issues_with_fix=fail_only_for_issues_with_fix,
            policy=policy,
            severity_threshold=severity_threshold,
            _configuration=_configuration,
            **kwargs,
        )
