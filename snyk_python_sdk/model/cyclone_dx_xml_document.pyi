# coding: utf-8

"""
    Snyk API

    Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.

    The version of the OpenAPI document: REST
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snyk_python_sdk import schemas  # noqa: F401


class CycloneDxXmlDocument(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "components",
            "metadata",
            "dependencies",
        }
        
        class properties:
            
            
            class components(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CycloneDxComponent']:
                        return CycloneDxComponent
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CycloneDxComponent'], typing.List['CycloneDxComponent']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'components':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CycloneDxComponent':
                    return super().__getitem__(i)
            
            
            class dependencies(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CycloneDxDependency']:
                        return CycloneDxDependency
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CycloneDxDependency'], typing.List['CycloneDxDependency']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dependencies':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CycloneDxDependency':
                    return super().__getitem__(i)
        
            @staticmethod
            def metadata() -> typing.Type['CycloneDxMetadata']:
                return CycloneDxMetadata
            __annotations__ = {
                "components": components,
                "dependencies": dependencies,
                "metadata": metadata,
            }
    
    components: MetaOapg.properties.components
    metadata: 'CycloneDxMetadata'
    dependencies: MetaOapg.properties.dependencies
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["components"]) -> MetaOapg.properties.components: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dependencies"]) -> MetaOapg.properties.dependencies: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'CycloneDxMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["components", "dependencies", "metadata", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["components"]) -> MetaOapg.properties.components: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dependencies"]) -> MetaOapg.properties.dependencies: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> 'CycloneDxMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["components", "dependencies", "metadata", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        components: typing.Union[MetaOapg.properties.components, list, tuple, ],
        metadata: 'CycloneDxMetadata',
        dependencies: typing.Union[MetaOapg.properties.dependencies, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CycloneDxXmlDocument':
        return super().__new__(
            cls,
            *args,
            components=components,
            metadata=metadata,
            dependencies=dependencies,
            _configuration=_configuration,
            **kwargs,
        )

from snyk_python_sdk.model.cyclone_dx_component import CycloneDxComponent
from snyk_python_sdk.model.cyclone_dx_dependency import CycloneDxDependency
from snyk_python_sdk.model.cyclone_dx_metadata import CycloneDxMetadata
