# coding: utf-8

"""
    Snyk API

    Missing description placeholder

    The version of the OpenAPI document: REST
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snyk_python_sdk import schemas  # noqa: F401


class Links(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def first() -> typing.Type['LinkProperty']:
                return LinkProperty
        
            @staticmethod
            def last() -> typing.Type['LinkProperty']:
                return LinkProperty
        
            @staticmethod
            def next() -> typing.Type['LinkProperty']:
                return LinkProperty
        
            @staticmethod
            def prev() -> typing.Type['LinkProperty']:
                return LinkProperty
        
            @staticmethod
            def related() -> typing.Type['LinkProperty']:
                return LinkProperty
        
            @staticmethod
            def _self() -> typing.Type['LinkProperty']:
                return LinkProperty
            __annotations__ = {
                "first": first,
                "last": last,
                "next": next,
                "prev": prev,
                "related": related,
                "self": _self,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first"]) -> 'LinkProperty': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last"]) -> 'LinkProperty': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["next"]) -> 'LinkProperty': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prev"]) -> 'LinkProperty': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["related"]) -> 'LinkProperty': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["self"]) -> 'LinkProperty': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["first", "last", "next", "prev", "related", "self", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first"]) -> typing.Union['LinkProperty', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last"]) -> typing.Union['LinkProperty', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["next"]) -> typing.Union['LinkProperty', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prev"]) -> typing.Union['LinkProperty', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["related"]) -> typing.Union['LinkProperty', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["self"]) -> typing.Union['LinkProperty', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["first", "last", "next", "prev", "related", "self", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        first: typing.Union['LinkProperty', schemas.Unset] = schemas.unset,
        last: typing.Union['LinkProperty', schemas.Unset] = schemas.unset,
        next: typing.Union['LinkProperty', schemas.Unset] = schemas.unset,
        prev: typing.Union['LinkProperty', schemas.Unset] = schemas.unset,
        related: typing.Union['LinkProperty', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Links':
        return super().__new__(
            cls,
            *args,
            first=first,
            last=last,
            next=next,
            prev=prev,
            related=related,
            _configuration=_configuration,
            **kwargs,
        )

from snyk_python_sdk.model.link_property import LinkProperty
