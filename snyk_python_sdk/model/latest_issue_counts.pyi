# coding: utf-8

"""
    Snyk API

    Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.

    The version of the OpenAPI document: REST
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snyk_python_sdk import schemas  # noqa: F401


class LatestIssueCounts(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            critical = schemas.NumberSchema
            high = schemas.NumberSchema
            low = schemas.NumberSchema
            medium = schemas.NumberSchema
            updated_at = schemas.DateTimeSchema
            __annotations__ = {
                "critical": critical,
                "high": high,
                "low": low,
                "medium": medium,
                "updated_at": updated_at,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["critical"]) -> MetaOapg.properties.critical: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["high"]) -> MetaOapg.properties.high: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["low"]) -> MetaOapg.properties.low: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["medium"]) -> MetaOapg.properties.medium: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["critical", "high", "low", "medium", "updated_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["critical"]) -> typing.Union[MetaOapg.properties.critical, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["high"]) -> typing.Union[MetaOapg.properties.high, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["low"]) -> typing.Union[MetaOapg.properties.low, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["medium"]) -> typing.Union[MetaOapg.properties.medium, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["critical", "high", "low", "medium", "updated_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        critical: typing.Union[MetaOapg.properties.critical, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        high: typing.Union[MetaOapg.properties.high, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        low: typing.Union[MetaOapg.properties.low, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        medium: typing.Union[MetaOapg.properties.medium, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LatestIssueCounts':
        return super().__new__(
            cls,
            *args,
            critical=critical,
            high=high,
            low=low,
            medium=medium,
            updated_at=updated_at,
            _configuration=_configuration,
            **kwargs,
        )
