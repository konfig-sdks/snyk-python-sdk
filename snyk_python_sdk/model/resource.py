# coding: utf-8

"""
    Snyk API

    Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.

    The version of the OpenAPI document: REST
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snyk_python_sdk import schemas  # noqa: F401


class Resource(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "input_type",
            "name",
            "resource_type",
            "id",
            "type",
            "platform",
        }
        
        class properties:
            id = schemas.UUIDSchema
            
            
            class input_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "cloud_scan": "CLOUD_SCAN",
                        "arm": "ARM",
                        "k8s": "K8S",
                        "tf": "TF",
                        "tf_hcl": "TF_HCL",
                        "tf_plan": "TF_PLAN",
                        "tf_state": "TF_STATE",
                        "cfn": "CFN",
                    }
                
                @schemas.classproperty
                def CLOUD_SCAN(cls):
                    return cls("cloud_scan")
                
                @schemas.classproperty
                def ARM(cls):
                    return cls("arm")
                
                @schemas.classproperty
                def K8S(cls):
                    return cls("k8s")
                
                @schemas.classproperty
                def TF(cls):
                    return cls("tf")
                
                @schemas.classproperty
                def TF_HCL(cls):
                    return cls("tf_hcl")
                
                @schemas.classproperty
                def TF_PLAN(cls):
                    return cls("tf_plan")
                
                @schemas.classproperty
                def TF_STATE(cls):
                    return cls("tf_state")
                
                @schemas.classproperty
                def CFN(cls):
                    return cls("cfn")
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 256
                    min_length = 1
            
            
            class platform(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 256
                    min_length = 1
            
            
            class resource_type(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 256
                    min_length = 1
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "cloud": "CLOUD",
                        "iac": "IAC",
                    }
                
                @schemas.classproperty
                def CLOUD(cls):
                    return cls("cloud")
                
                @schemas.classproperty
                def IAC(cls):
                    return cls("iac")
        
            @staticmethod
            def tags() -> typing.Type['ResourceTags']:
                return ResourceTags
            
            
            class iac_mappings_count(
                schemas.Int64Schema
            ):
            
            
                class MetaOapg:
                    format = 'int64'
                    inclusive_minimum = 0
            
            
            class location(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 256
                    min_length = 1
            
            
            class native_id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 2048
                    min_length = 1
            __annotations__ = {
                "id": id,
                "input_type": input_type,
                "name": name,
                "platform": platform,
                "resource_type": resource_type,
                "type": type,
                "tags": tags,
                "iac_mappings_count": iac_mappings_count,
                "location": location,
                "native_id": native_id,
            }
    
    input_type: MetaOapg.properties.input_type
    name: MetaOapg.properties.name
    resource_type: MetaOapg.properties.resource_type
    id: MetaOapg.properties.id
    type: MetaOapg.properties.type
    platform: MetaOapg.properties.platform
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["input_type"]) -> MetaOapg.properties.input_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resource_type"]) -> MetaOapg.properties.resource_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> 'ResourceTags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iac_mappings_count"]) -> MetaOapg.properties.iac_mappings_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["native_id"]) -> MetaOapg.properties.native_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "input_type", "name", "platform", "resource_type", "type", "tags", "iac_mappings_count", "location", "native_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["input_type"]) -> MetaOapg.properties.input_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resource_type"]) -> MetaOapg.properties.resource_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union['ResourceTags', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iac_mappings_count"]) -> typing.Union[MetaOapg.properties.iac_mappings_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union[MetaOapg.properties.location, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["native_id"]) -> typing.Union[MetaOapg.properties.native_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "input_type", "name", "platform", "resource_type", "type", "tags", "iac_mappings_count", "location", "native_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        input_type: typing.Union[MetaOapg.properties.input_type, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        resource_type: typing.Union[MetaOapg.properties.resource_type, str, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        platform: typing.Union[MetaOapg.properties.platform, str, ],
        tags: typing.Union['ResourceTags', schemas.Unset] = schemas.unset,
        iac_mappings_count: typing.Union[MetaOapg.properties.iac_mappings_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        location: typing.Union[MetaOapg.properties.location, str, schemas.Unset] = schemas.unset,
        native_id: typing.Union[MetaOapg.properties.native_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Resource':
        return super().__new__(
            cls,
            *args,
            input_type=input_type,
            name=name,
            resource_type=resource_type,
            id=id,
            type=type,
            platform=platform,
            tags=tags,
            iac_mappings_count=iac_mappings_count,
            location=location,
            native_id=native_id,
            _configuration=_configuration,
            **kwargs,
        )

from snyk_python_sdk.model.resource_tags import ResourceTags
