# coding: utf-8

"""
    Snyk API

    Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.

    The version of the OpenAPI document: REST
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from snyk_python_sdk.pydantic.coordinate import Coordinate
from snyk_python_sdk.pydantic.model_class import ModelClass
from snyk_python_sdk.pydantic.problem import Problem
from snyk_python_sdk.pydantic.resolution import Resolution
from snyk_python_sdk.pydantic.risk import Risk
from snyk_python_sdk.pydantic.type_def import TypeDef

class IssueAttributes(BaseModel):
    # A human-readable title for this issue.
    title: str = Field(alias='title')

    # The creation time of this issue.
    created_at: datetime = Field(alias='created_at')

    # The computed effective severity of this issue. This is either the highest level from all included severities, or an overridden value set via group level policy. 
    effective_severity_level: Literal["info", "low", "medium", "high", "critical"] = Field(alias='effective_severity_level')

    # A flag indicating if the issue is being ignored. Derived from the issue's ignore, which provides more details.
    ignored: bool = Field(alias='ignored')

    # An opaque key used for uniquely identifying this issue across test runs, within a project.
    key: str = Field(alias='key')

    # The issue's status. Derived from the issue's resolution, which provides more details.
    status: Literal["open", "resolved"] = Field(alias='status')

    type: TypeDef = Field(alias='type')

    # The time when this issue was last modified.
    updated_at: datetime = Field(alias='updated_at')

    # A markdown-formatted optional description of this issue. Links are not permitted.
    description: typing.Optional[str] = Field(None, alias='description')

    # A list of details for weakness data, policy, etc that are the class of this issue's source.
    classes: typing.Optional[typing.List[ModelClass]] = Field(None, alias='classes')

    # Where the issue originated, specific to issue type. Details on what code, package, etc introduced the issue. An issue may be caused by more than one coordinate. 
    coordinates: typing.Optional[typing.List[Coordinate]] = Field(None, alias='coordinates')

    # A list of details for vulnerability data, policy, etc that are the source of this issue.
    problems: typing.Optional[typing.List[Problem]] = Field(None, alias='problems')

    resolution: typing.Optional[Resolution] = Field(None, alias='resolution')

    risk: typing.Optional[Risk] = Field(None, alias='risk')

    # An opaque identifier for corelating across test runs.
    tool: typing.Optional[str] = Field(None, alias='tool')
    class Config:
        arbitrary_types_allowed = True
