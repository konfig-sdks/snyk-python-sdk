# coding: utf-8

"""
    Snyk API

    Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.

    The version of the OpenAPI document: REST
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from snyk_python_sdk.pydantic.container_build_args import ContainerBuildArgs
from snyk_python_sdk.pydantic.nuget_build_args import NugetBuildArgs
from snyk_python_sdk.pydantic.project_attributes_business_criticality import ProjectAttributesBusinessCriticality
from snyk_python_sdk.pydantic.project_attributes_environment import ProjectAttributesEnvironment
from snyk_python_sdk.pydantic.project_attributes_lifecycle import ProjectAttributesLifecycle
from snyk_python_sdk.pydantic.project_attributes_tags import ProjectAttributesTags
from snyk_python_sdk.pydantic.project_settings import ProjectSettings
from snyk_python_sdk.pydantic.yarn_build_args import YarnBuildArgs

class ProjectAttributes(BaseModel):
    # The date that the project was created on
    created: datetime = Field(alias='created')

    # Project name.
    name: str = Field(alias='name')

    # The origin the project was added from.
    origin: str = Field(alias='origin')

    # Whether the project is read-only
    read_only: bool = Field(alias='read_only')

    settings: ProjectSettings = Field(alias='settings')

    # Describes if a project is currently monitored or it is de-activated.
    status: Literal["active", "inactive"] = Field(alias='status')

    # Path within the target to identify a specific file/directory/image etc. when scanning just part  of the target, and not the entity.
    target_file: str = Field(alias='target_file')

    # The additional information required to resolve which revision of the resource should be scanned.
    target_reference: str = Field(alias='target_reference')

    # The package manager of the project.
    type: str = Field(alias='type')

    tags: typing.Optional[ProjectAttributesTags] = Field(None, alias='tags')

    build_args: typing.Optional[typing.Union[YarnBuildArgs, ContainerBuildArgs, NugetBuildArgs]] = Field(None, alias='build_args')

    business_criticality: typing.Optional[ProjectAttributesBusinessCriticality] = Field(None, alias='business_criticality')

    environment: typing.Optional[ProjectAttributesEnvironment] = Field(None, alias='environment')

    lifecycle: typing.Optional[ProjectAttributesLifecycle] = Field(None, alias='lifecycle')

    # Dotnet Target, for relevant projects
    target_runtime: typing.Optional[str] = Field(None, alias='target_runtime')
    class Config:
        arbitrary_types_allowed = True
